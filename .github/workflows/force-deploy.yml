name: deployment

on:
  push:
    branches:
      - master
  pull_request:
    branches: [ master ]  
  
jobs:

  terraform-k8s-cluster:

    environment: development

    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v2

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.6
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform version
        run: terraform --version

      - name: Terraform fmt
        working-directory: terraform/k8s-cluster
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        working-directory: terraform/k8s-cluster
        id: init
        run: terraform init

      - name: Terraform Validate
        working-directory: terraform/k8s-cluster
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        working-directory: terraform/k8s-cluster
        id: plan
        env:
          # Creds
          TF_VAR_appId: ${{ secrets.AZURE_APP_ID }}
          TF_VAR_password: ${{ secrets.AZURE_PASSWORD }}
          # Azure Auth
          TF_VAR_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          TF_VAR_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          TF_VAR_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
          TF_VAR_TENANT_ID: ${{ secrets.TENANT_ID }}
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `## Terraform Plan ü™ê
            - Terraform Format and Style üñå: \`${{ steps.fmt.outcome }}\`
            - Terraform Initialization ‚öôÔ∏è: \`${{ steps.init.outcome }}\`
            - Terraform Validation ü§ñ: ${{ steps.validate.outputs.stdout }}
            - Terraform Plan üìñ: \`${{ steps.plan.outcome }}\`
            
            <details><summary><b>Show Plan</b></summary>
            
            \`\`\`${process.env.PLAN}\`\`\`
            
            </details>
            
            > Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`terraform/k8s-cluster\`, Workflow: \`${{ github.workflow }}\``;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform apply
        working-directory: terraform/k8s-cluster
        env:
          # Config
          TF_VAR_IMAGE_TAG: latest
          # Creds
          TF_VAR_appId: ${{ secrets.AZURE_APP_ID }}
          TF_VAR_password: ${{ secrets.AZURE_PASSWORD }}
          # Azure Auth
          TF_VAR_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          TF_VAR_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
          TF_VAR_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
          TF_VAR_TENANT_ID: ${{ secrets.TENANT_ID }}
        run: terraform apply -auto-approve

  # terraform-k8s:
  #   # These are the resources that run on the k8s-cluster
  #   needs: [changes, build, terraform-k8s-cluster]
  #   if: needs.changes.outputs.src == 'true' || needs.changes.outputs.terraform-k8s == 'true' || needs.changes.outputs.terraform-k8s-cluster == 'true'

  #   runs-on: ubuntu-latest

  #   steps:

  #     - uses: actions/checkout@v2

  #     - uses: azure/login@v1
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     - uses: azure/k8s-set-context@v1
  #       with:
  #         method: kubeconfig
  #         kubeconfig: ${{ secrets.KUBE_CONFIG }}
  #       id: setcontext

  #     - uses: hashicorp/setup-terraform@v1
  #       with:
  #         terraform_version: 1.0.6
  #         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

  #     - name: Terraform version
  #       run: terraform --version

  #     - name: Terraform fmt
  #       working-directory: terraform/k8s
  #       id: fmt
  #       run: terraform fmt -check
  #       continue-on-error: true

  #     - name: Terraform Init
  #       working-directory: terraform/k8s
  #       id: init
  #       run: terraform init

  #     - name: Terraform Validate
  #       working-directory: terraform/k8s
  #       id: validate
  #       run: terraform validate -no-color

  #     - name: Terraform Plan
  #       if: github.event_name == 'pull_request'
  #       working-directory: terraform/k8s
  #       id: plan
  #       env:
  #         # Config
  #         TF_VAR_IMAGE_TAG: latest
  #         # Creds
  #         TF_VAR_DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
  #         # Azure Auth
  #         TF_VAR_CLIENT_ID: ${{ secrets.CLIENT_ID }}
  #         TF_VAR_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
  #         TF_VAR_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
  #         TF_VAR_TENANT_ID: ${{ secrets.TENANT_ID }}
  #       run: terraform plan -no-color
  #       continue-on-error: true

  #     - uses: actions/github-script@0.9.0
  #       if: github.event_name == 'pull_request'
  #       env:
  #         PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         script: |
  #           const output = `## Terraform Plan ü™ê
  #           - Terraform Format and Style üñå: \`${{ steps.fmt.outcome }}\`
  #           - Terraform Initialization ‚öôÔ∏è: \`${{ steps.init.outcome }}\`
  #           - Terraform Validation ü§ñ: ${{ steps.validate.outputs.stdout }}
  #           - Terraform Plan üìñ: \`${{ steps.plan.outcome }}\`
            
  #           <details><summary><b>Show Plan</b></summary>
            
  #           \`\`\`${process.env.PLAN}\`\`\`
            
  #           </details>
            
  #           > Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`terraform/k8s\`, Workflow: \`${{ github.workflow }}\``;
              
  #           github.issues.createComment({
  #             issue_number: context.issue.number,
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             body: output
  #           })

  #     - name: Terraform apply
  #       if: github.event_name == 'push'
  #       working-directory: terraform/k8s
  #       env:
  #         # Config
  #         TF_VAR_IMAGE_TAG: latest
  #         # Creds
  #         TF_VAR_DISCORD_TOKEN: ${{ secrets.DISCORD_TOKEN }}
  #         # Azure Auth
  #         TF_VAR_CLIENT_ID: ${{ secrets.CLIENT_ID }}
  #         TF_VAR_CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
  #         TF_VAR_SUBSCRIPTION_ID: ${{ secrets.SUBSCRIPTION_ID }}
  #         TF_VAR_TENANT_ID: ${{ secrets.TENANT_ID }}
  #       run: terraform apply -auto-approve