name: Deploy Prod ðŸš€

on:
  push:
    branches:
      - master

jobs:

  changes:
    runs-on: ubuntu-latest
    outputs:
      feyre-src: ${{ steps.filter.outputs.feyre-src }}
      feyre-terraform-modules: ${{ steps.filter.outputs.feyre-terraform-modules }}
      feyre-terraform: ${{ steps.filter.outputs.feyre-terraform }}
    steps:
    - uses: actions/checkout@v2
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          feyre-src:
            - 'dockerfile'
            - 'Feyre.py'
            - 'Die.py'
            - 'requirements.txt'
            - '_backend/**'
            - '_classes/**'
            - '_cogs/**'
            - '_data/**'
            - '_index/**'    
          feyre-terraform-modules:
            - 'terraform/modules/**'
          feyre-terraform:
            - 'terraform/prod/*'

  test-feyre:

      needs: [changes]
      if: ${{ needs.changes.outputs.feyre-src == 'true' }}

      runs-on: ubuntu-latest

      steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - uses: actions/cache@v2
        id: cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "cache miss - installing dependencies"
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Test with pylint
        run: |
          sudo apt install pylint -y
          pylint -E Feyre.py -d E0401 || { echo "Failure! - Python Error Checks Failed - $?" ; exit 1; }
          echo "Success! - Python Error Checks Passed"

      - name: python vuln check
        run: |
          pip install safety
          safety check

  push-feyre:

    needs: [changes, test-feyre]
    if: ${{ needs.changes.outputs.feyre-src == 'true' }}

    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v2

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Build and push image'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - run: |
          docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/feyre:prod-${{ github.sha }}
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/feyre:prod-${{ github.sha }}

  terraform-feyre:

    needs: [changes, push-feyre]
    if: ${{ needs.changes.outputs.feyre-terraform == 'true' }} || ${{ needs.changes.outputs.feyre-terraform-modules == 'true' }} || ${{ needs.changes.outputs.feyre-src == 'true' }}

    runs-on: ubuntu-latest

    env:
      TF_VAR_FEYRE_TOKEN: ${{ secrets.FEYRE_TOKEN_PROD }}
      TF_VAR_image_tag: ${{ github.sha }}
      TF_VAR_BUCKET_KEY: ${{ secrets.BUCKET_KEY }}
      TF_VAR_ACCESSKEY: ${{ secrets.ACCESSKEY }}
      TF_VAR_client_id: ${{ secrets.client_id }}
      TF_VAR_client_secret: ${{ secrets.client_secret }}
      TF_VAR_subscription_id: ${{ secrets.subscription_id }}
      TF_VAR_tenant_id: ${{ secrets.tenant_id }}

    steps:

      - uses: actions/checkout@v2

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: actions/cache@v2
        id: cache
        with:
          path: /usr/local/bin/terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/terraform_version') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      - name: Terraform Install
        working-directory: terraform
        run: |
          tf_version=$(cat terraform_version)
          wget -q https://releases.hashicorp.com/terraform/"$tf_version"/terraform_"$tf_version"_linux_amd64.zip
          unzip -q terraform_"$tf_version"_linux_amd64.zip
          sudo mv terraform /usr/local/bin/

      - name: Terraform version
        run: terraform --version

      - name: Terraform init
        working-directory: terraform/prod
        run: terraform init

      - name: Terraform validate
        working-directory: terraform/prod
        run: terraform validate

      - name: Terraform format
        working-directory: terraform/prod
        run: terraform fmt -check

      - name: Terraform plan
        working-directory: terraform/prod
        run: terraform plan

      - name: Terraform apply
        working-directory: terraform/prod
        run: terraform apply -auto-approve
