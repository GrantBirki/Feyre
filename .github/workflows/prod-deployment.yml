name: Deploy Prod üöÄ

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:

  changes:
    runs-on: ubuntu-latest
    outputs:
      feyre-src: ${{ steps.filter.outputs.feyre-src }}
      feyre-terraform-modules: ${{ steps.filter.outputs.feyre-terraform-modules }}
      feyre-terraform: ${{ steps.filter.outputs.feyre-terraform }}
    steps:
    - uses: actions/checkout@v2
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          feyre-src:
            - 'dockerfile'
            - 'Feyre.py'
            - 'Die.py'
            - 'requirements.txt'
            - '_backend/**'
            - '_classes/**'
            - '_cogs/**'
            - '_data/**'
            - '_index/**'    
          feyre-terraform-modules:
            - 'terraform/modules/**'
          feyre-terraform:
            - 'terraform/prod/*'

  test-feyre:

      needs: [changes]
      if: ${{ needs.changes.outputs.feyre-src == 'true' }}

      runs-on: ubuntu-latest

      steps:
      - uses: actions/checkout@v2

      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - uses: actions/cache@v2
        id: cache
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "cache miss - installing dependencies"
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Test with pylint
        run: |
          sudo apt install pylint -y
          pylint -E Feyre.py -d E0401 || { echo "Failure! - Python Error Checks Failed - $?" ; exit 1; }
          echo "Success! - Python Error Checks Passed"

      - name: python vuln check
        run: |
          pip install safety
          safety check

  push-feyre:

    needs: [changes, test-feyre]
    if: ${{ needs.changes.outputs.feyre-src == 'true' }}

    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v2

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 'Build and push image'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - run: |
          docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/feyre:prod-${{ github.sha }}
          docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/feyre:prod-${{ github.sha }}

  terraform-feyre:

    needs: [changes, push-feyre]
    if: ${{ needs.changes.outputs.feyre-terraform == 'true' }} || ${{ needs.changes.outputs.feyre-terraform-modules == 'true' }} || ${{ needs.changes.outputs.feyre-src == 'true' }}

    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v2

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.10
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform version
        run: terraform --version

      - name: Terraform fmt
        working-directory: terraform/prod
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        working-directory: terraform/prod
        id: init
        run: terraform init

      - name: Terraform Validate
        working-directory: terraform/prod
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        working-directory: terraform/prod
        id: plan
        env:
          TF_VAR_FEYRE_TOKEN: ${{ secrets.FEYRE_TOKEN_PROD }}
          TF_VAR_image_tag: ${{ github.sha }}
          TF_VAR_BUCKET_KEY: ${{ secrets.BUCKET_KEY }}
          TF_VAR_ACCESSKEY: ${{ secrets.ACCESSKEY }}
          TF_VAR_client_id: ${{ secrets.client_id }}
          TF_VAR_client_secret: ${{ secrets.client_secret }}
          TF_VAR_subscription_id: ${{ secrets.subscription_id }}
          TF_VAR_tenant_id: ${{ secrets.tenant_id }}
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`${process.env.PLAN}\`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform apply
        if: github.event_name == 'push'
        working-directory: terraform/prod
        env:
          TF_VAR_FEYRE_TOKEN: ${{ secrets.FEYRE_TOKEN_PROD }}
          TF_VAR_image_tag: ${{ github.sha }}
          TF_VAR_BUCKET_KEY: ${{ secrets.BUCKET_KEY }}
          TF_VAR_ACCESSKEY: ${{ secrets.ACCESSKEY }}
          TF_VAR_client_id: ${{ secrets.client_id }}
          TF_VAR_client_secret: ${{ secrets.client_secret }}
          TF_VAR_subscription_id: ${{ secrets.subscription_id }}
          TF_VAR_tenant_id: ${{ secrets.tenant_id }}
        run: terraform apply -auto-approve